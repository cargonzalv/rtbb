// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/adgear/rtb-bidder/config"
	"github.com/adgear/rtb-bidder/internal/bidder"
	"github.com/adgear/rtb-bidder/internal/bidder/bidding"
	"github.com/adgear/rtb-bidder/internal/bidder/health"
	"github.com/adgear/rtb-bidder/internal/bidder/health/probe"
	"github.com/adgear/rtb-bidder/internal/bidder/server"
	"github.com/adgear/rtb-bidder/internal/bidder/server/handler"
	"github.com/adgear/rtb-bidder/internal/lds"
	"github.com/adgear/rtb-bidder/internal/observability"
	"github.com/adgear/rtb-bidder/internal/serializer"
)

// Injectors from wire.go:

// Using by the wire to generate gependency tree.
// This file is not include into release.
func Wire() *App {
	configConfig := config.ProvideConfig()
	service := observability.ProvideLogger(configConfig)
	metricService := observability.ProvideMetrics(configConfig)
	router := server.ProvideFastHttpRouter()
	v := probe.ProvideProbes(metricService)
	observer := health.ProvideService(service, v, configConfig)
	healthHandler := health.ProvideHandler(service, observer)
	healthRouter := health.ProvideRouter(healthHandler)
	bidder := bidding.ProvideBidder(service, metricService)
	jsonSerializer := serializer.ProvideJsonSerializer()
	biddingHandler := bidding.ProvideHandler(service, bidder, jsonSerializer)
	biddingRouter := bidding.ProvideRouter(biddingHandler)
	handlerRouter := handler.ProvideRouter(service, metricService, configConfig)
	observabilityRouter := observability.ProvideRouter()
	localDataStore := lds.ProvideLocalDataStore(configConfig)
	ldsRouter := lds.ProvideLdsRouter(localDataStore)
	v2 := ProvideRouters(healthRouter, biddingRouter, handlerRouter, observabilityRouter, ldsRouter)
	serverServer := server.ProvideRestServer(service, metricService, router, v2, configConfig)
	app := &App{
		logger:        service,
		metrics:       metricService,
		restServer:    serverServer,
		healthService: observer,
		ldsService:    localDataStore,
	}
	return app
}

// wire.go:

// ProvideRouters is the function providing the list of routers from all packages, which have `bidder.Router` interface implemented.
func ProvideRouters(health2 health.Router, bidding2 bidding.Router, handler2 handler.Router, observability2 observability.Router, ldsRouter lds.LdsRouter) *[]bidder.Router {
	return &[]bidder.Router{health2, bidding2, handler2, observability2, &ldsRouter}
}

// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package probe is a generated GoMock package.
package probe

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProbe is a mock of Probe interface.
type MockProbe struct {
	ctrl     *gomock.Controller
	recorder *MockProbeMockRecorder
}

// MockProbeMockRecorder is the mock recorder for MockProbe.
type MockProbeMockRecorder struct {
	mock *MockProbe
}

// NewMockProbe creates a new mock instance.
func NewMockProbe(ctrl *gomock.Controller) *MockProbe {
	mock := &MockProbe{ctrl: ctrl}
	mock.recorder = &MockProbeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProbe) EXPECT() *MockProbeMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockProbe) Check() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockProbeMockRecorder) Check() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockProbe)(nil).Check))
}

// IsCritical mocks base method.
func (m *MockProbe) IsCritical() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCritical")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsCritical indicates an expected call of IsCritical.
func (mr *MockProbeMockRecorder) IsCritical() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCritical", reflect.TypeOf((*MockProbe)(nil).IsCritical))
}

// Name mocks base method.
func (m *MockProbe) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockProbeMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockProbe)(nil).Name))
}
